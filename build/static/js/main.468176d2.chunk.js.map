{"version":3,"sources":["stores/models/Canvas/canvas.types.ts","services/CanvasService.ts","stores/actionHandlers/onCanvasAction.ts","stores/models/Canvas/Canvas.ts","stores/models/History/History.ts","stores/index.ts","hooks/useStore.ts","components/svg/Circle.tsx","components/svg/Square.tsx","components/svg/Triangle.tsx","components/SvgFigure/SvgFigure.tsx","components/Editor/Canvas/Figure/Figure.tsx","components/Editor/Canvas/Canvas.tsx","components/Editor/ControlBar/ControlBar.tsx","components/Editor/Editor.tsx","containers/App/App.tsx","serviceWorker.js","index.tsx"],"names":["EResizeType","EFigureType","canvasService","STORAGE_NAME","item","window","localStorage","setItem","this","JSON","stringify","value","getItem","parse","undefined","Figure","types","model","id","identifier","left","number","top","width","height","type","enumeration","Object","values","CanvasStore","figures","array","selectedFigureId","maybeNull","string","optional","isDragging","boolean","resizingType","DISABLE","minFigureWidth","minFigureHeight","figureTypes","actions","self","addFigure","figureType","newFigure","shortid","push","selectFigure","figureId","moveSelectedFigure","changeX","changeY","figure","find","figureItem","nextPositionLeft","nextPositionTop","deleteSelectedFigure","activeFigure","destroy","setIsDragging","setResizingType","stopResizing","resizeSelectedFigure","figureChanges","LEFT_TOP","LEFT_BOT","RIGHT_TOP","RIGHT_BOT","views","HistoryModel","properties","HistoryStore","snapShots","activeSnapIndex","length","addSnapShot","snap","humanActiveIndex","splice","setValue","changeIndexBy","indexChange","targetSnapIndex","rootStore","getRoot","targetSnap","applySnapshot","canvas","getSnapshot","history","canvasStoreData","getValue","store","create","onAction","call","getPath","path","canvasSnap","StoreContext","React","createContext","useStore","useContext","Circle","props","viewBox","cx","cy","rx","ry","Square","Triangle","points","figuresMap","SQUARE","TRIANGLE","CIRCLE","SvgFigure","svgProps","SvgFigureItem","dotList","className","observer","context","isActive","useMemo","key","style","transform","classNames","_active","_dragging","onClick","onMouseDown","e","stopPropagation","button","map","dot","resizeType","onDotMouseDown","preserveAspectRatio","canvasRef","useRef","onMouseLeave","currentTarget","current","ref","_disabled","canBack","canForward","editorRef","disableActions","isResizing","useEffect","onKeyDown","document","addEventListener","removeEventListener","onMouseMove","movementX","movementY","onMouseUp","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.468176d2.chunk.js","sourcesContent":["export enum EResizeType {\r\n  DISABLE = 'disable',\r\n  LEFT_TOP = 'left-top',\r\n  LEFT_BOT = 'left-bottom',\r\n  RIGHT_TOP = 'right-top',\r\n  RIGHT_BOT = 'right-bottom',\r\n}\r\n\r\nexport enum EFigureType {\r\n  CIRCLE = 'circle',\r\n  SQUARE = 'square',\r\n  TRIANGLE = 'triangle',\r\n}\r\n","import { SnapshotOut } from 'mobx-state-tree';\r\nimport { CanvasStore } from '../stores/models/Canvas/Canvas';\r\n\r\nclass CanvasService {\r\n  private readonly STORAGE_NAME = 'CANVAS';\r\n\r\n  public setValue(item: SnapshotOut<typeof CanvasStore>): void {\r\n    window.localStorage.setItem(this.STORAGE_NAME, JSON.stringify(item));\r\n  }\r\n\r\n  public getValue(): string | undefined {\r\n    const value = window.localStorage.getItem(this.STORAGE_NAME);\r\n    return value ? JSON.parse(value) : undefined;\r\n  }\r\n}\r\n\r\nexport const canvasService = new CanvasService();\r\n","import { getPath, getSnapshot, ISerializedActionCall } from 'mobx-state-tree';\r\nimport { store } from '../index';\r\nimport { EResizeType } from '../models/Canvas/canvas.types';\r\n\r\nexport const onCanvasAction = (call: ISerializedActionCall) => {\r\n  if (getPath(store.canvas) === call.path) {\r\n    const canvasSnap = getSnapshot(store.canvas);\r\n    // don't save snapshots when dragging and resizing (too match)\r\n    if (\r\n      !canvasSnap.isDragging &&\r\n      canvasSnap.resizingType === EResizeType.DISABLE\r\n    ) {\r\n      store.history.addSnapShot(canvasSnap);\r\n    }\r\n  }\r\n};\r\n","import { destroy, SnapshotIn, types } from 'mobx-state-tree';\r\nimport shortid from 'shortid';\r\nimport { EFigureType, EResizeType } from './canvas.types';\r\n\r\nconst Figure = types.model({\r\n  id: types.identifier,\r\n  left: types.number,\r\n  top: types.number,\r\n  width: types.number,\r\n  height: types.number,\r\n  type: types.enumeration(Object.values(EFigureType)),\r\n});\r\n\r\nexport type IFigure = SnapshotIn<typeof Figure>;\r\n\r\nexport const CanvasStore = types\r\n  .model({\r\n    figures: types.array(Figure),\r\n    selectedFigureId: types.maybeNull(types.string),\r\n    width: types.optional(types.number, 800),\r\n    height: types.optional(types.number, 600),\r\n    isDragging: types.optional(types.boolean, false),\r\n    resizingType: types.optional(\r\n      types.enumeration(Object.values(EResizeType)),\r\n      EResizeType.DISABLE\r\n    ),\r\n    minFigureWidth: types.optional(types.number, 100),\r\n    minFigureHeight: types.optional(types.number, 100),\r\n    figureTypes: types.optional(\r\n      types.array(types.enumeration(Object.values(EFigureType))),\r\n      Object.values(EFigureType)\r\n    ),\r\n  })\r\n  .actions(self => ({\r\n    addFigure(figureType: EFigureType, width = 150, height = 150) {\r\n      const newFigure = {\r\n        id: shortid(),\r\n        type: figureType,\r\n        width,\r\n        height,\r\n        left: self.width / 2 - width / 2,\r\n        top: self.height / 2 - height / 2,\r\n      };\r\n      self.figures.push(newFigure);\r\n      self.selectedFigureId = newFigure.id;\r\n      return newFigure;\r\n    },\r\n\r\n    selectFigure(figureId: string | null) {\r\n      self.selectedFigureId = figureId;\r\n    },\r\n\r\n    moveSelectedFigure(changeX: number, changeY: number) {\r\n      const figure: IFigure | undefined = self.figures.find(\r\n        figureItem => figureItem.id === self.selectedFigureId\r\n      );\r\n      if (!figure) {\r\n        return;\r\n      }\r\n      // set position left\r\n      let nextPositionLeft = figure.left + changeX;\r\n      if (nextPositionLeft < 0) {\r\n        nextPositionLeft = 0;\r\n      }\r\n      if (nextPositionLeft > self.width - figure.width) {\r\n        nextPositionLeft = self.width - figure.width;\r\n      }\r\n      figure.left = nextPositionLeft;\r\n\r\n      // set position top\r\n      let nextPositionTop = figure.top + changeY;\r\n      if (nextPositionTop < 0) {\r\n        nextPositionTop = 0;\r\n      }\r\n      if (nextPositionTop > self.height - figure.height) {\r\n        nextPositionTop = self.height - figure.height;\r\n      }\r\n      figure.top = nextPositionTop;\r\n    },\r\n\r\n    deleteSelectedFigure() {\r\n      const activeFigure = self.figures.find(\r\n        figure => figure.id === self.selectedFigureId\r\n      );\r\n      if (activeFigure) {\r\n        destroy(activeFigure);\r\n        self.selectedFigureId = null;\r\n      }\r\n    },\r\n\r\n    setIsDragging(isDragging: boolean) {\r\n      self.isDragging = isDragging;\r\n    },\r\n\r\n    setResizingType(type: EResizeType) {\r\n      self.resizingType = type;\r\n    },\r\n\r\n    stopResizing() {\r\n      self.resizingType = EResizeType.DISABLE;\r\n    },\r\n\r\n    resizeSelectedFigure(changeX: number, changeY: number) {\r\n      const figure: IFigure | undefined = self.figures.find(\r\n        figureItem => figureItem.id === self.selectedFigureId\r\n      );\r\n      if (!figure || (!changeX && !changeY)) {\r\n        return;\r\n      }\r\n      const figureChanges = {\r\n        left: figure.left,\r\n        top: figure.top,\r\n        width: figure.width,\r\n        height: figure.height,\r\n      };\r\n      // set sizes and position based on resize type\r\n      switch (self.resizingType) {\r\n        case EResizeType.LEFT_TOP:\r\n          figureChanges.left += changeX;\r\n          figureChanges.top += changeY;\r\n          figureChanges.width -= changeX;\r\n          figureChanges.height -= changeY;\r\n          break;\r\n        case EResizeType.LEFT_BOT:\r\n          figureChanges.left += changeX;\r\n          figureChanges.width -= changeX;\r\n          figureChanges.height += changeY;\r\n          break;\r\n        case EResizeType.RIGHT_TOP:\r\n          figureChanges.top += changeY;\r\n          figureChanges.width += changeX;\r\n          figureChanges.height -= changeY;\r\n          break;\r\n        case EResizeType.RIGHT_BOT:\r\n          figureChanges.width += changeX;\r\n          figureChanges.height += changeY;\r\n          break;\r\n        case EResizeType.DISABLE:\r\n          return;\r\n      }\r\n      // save figure in canvas and save min size\r\n      if (\r\n        figureChanges.left < 0 ||\r\n        figureChanges.top < 0 ||\r\n        figureChanges.left + figureChanges.width > self.width ||\r\n        figureChanges.top + figureChanges.height > self.height ||\r\n        figureChanges.width < self.minFigureWidth ||\r\n        figureChanges.height < self.minFigureHeight\r\n      ) {\r\n        return;\r\n      }\r\n      // update figure\r\n      figure.left = figureChanges.left;\r\n      figure.top = figureChanges.top;\r\n      figure.width = figureChanges.width;\r\n      figure.height = figureChanges.height;\r\n    },\r\n  }))\r\n  .views(self => ({\r\n    get isResizing() {\r\n      return self.resizingType !== EResizeType.DISABLE;\r\n    },\r\n  }));\r\n","import {\r\n  applySnapshot,\r\n  getRoot,\r\n  getSnapshot,\r\n  SnapshotOut,\r\n  types,\r\n} from 'mobx-state-tree';\r\nimport { canvasService } from 'services/CanvasService';\r\nimport { CanvasStore } from '../Canvas/Canvas';\r\n\r\nconst HistoryModel = types.model(CanvasStore.properties);\r\n\r\nexport const HistoryStore = types\r\n  .model({\r\n    snapShots: types.array(HistoryModel),\r\n    activeSnapIndex: types.optional(types.number, 0),\r\n  })\r\n  .views(self => ({\r\n    get canBack() {\r\n      return !!self.activeSnapIndex;\r\n    },\r\n    get canForward() {\r\n      return self.activeSnapIndex + 1 < self.snapShots.length;\r\n    },\r\n  }))\r\n  .actions(self => ({\r\n    addSnapShot(snap: SnapshotOut<typeof CanvasStore>) {\r\n      const humanActiveIndex = self.activeSnapIndex + 1;\r\n      // remove snaps after active\r\n      if (humanActiveIndex < self.snapShots.length) {\r\n        self.snapShots.splice(\r\n          humanActiveIndex,\r\n          self.snapShots.length - humanActiveIndex\r\n        );\r\n      }\r\n      self.snapShots.push(snap);\r\n      self.activeSnapIndex = self.snapShots.length - 1;\r\n\r\n      canvasService.setValue(snap);\r\n    },\r\n    changeIndexBy(indexChange: number) {\r\n      const targetSnapIndex = self.activeSnapIndex + indexChange;\r\n      const rootStore = getRoot(self);\r\n\r\n      if (targetSnapIndex + 1 > self.snapShots.length) {\r\n        return;\r\n      }\r\n      const targetSnap = self.snapShots[targetSnapIndex];\r\n      self.activeSnapIndex = targetSnapIndex;\r\n      applySnapshot(rootStore.canvas, getSnapshot(targetSnap));\r\n\r\n      canvasService.setValue(targetSnap);\r\n    },\r\n  }));\r\n","import { onAction, types } from 'mobx-state-tree';\r\nimport React from 'react';\r\nimport { canvasService } from 'services/CanvasService';\r\nimport { onCanvasAction } from './actionHandlers/onCanvasAction';\r\nimport { CanvasStore } from './models/Canvas/Canvas';\r\nimport { HistoryStore } from './models/History/History';\r\n\r\nconst model = types.model({\r\n  canvas: CanvasStore,\r\n  history: HistoryStore,\r\n});\r\n\r\nconst canvasStoreData = canvasService.getValue() || {\r\n  figures: [],\r\n};\r\nexport const store = model.create({\r\n  canvas: canvasStoreData,\r\n  history: {\r\n    snapShots: [canvasStoreData],\r\n  },\r\n});\r\n\r\nonAction(store, onCanvasAction, true);\r\n\r\nexport type IStore = typeof store;\r\n\r\nexport const StoreContext = React.createContext(store);\r\n","import { useContext } from 'react';\r\nimport { IStore, StoreContext } from 'stores';\r\n\r\nexport const useStore = (): IStore => {\r\n  return useContext(StoreContext);\r\n};\r\n","import React from 'react';\n\nconst Circle: React.FC<React.SVGProps<SVGSVGElement>> = props => {\n  return (\n    <svg viewBox=\"-1 -1 32 32\" {...props}>\n      <ellipse cx=\"15\" cy=\"15\" rx=\"15\" ry=\"15\" />\n    </svg>\n  );\n};\n\nexport default Circle;\n","import React from 'react';\n\nconst Square: React.FC<React.SVGProps<SVGSVGElement>> = props => {\n  return (\n    <svg viewBox=\"-1 -1 32 32\" {...props}>\n      <rect width=\"30\" height=\"30\" />\n    </svg>\n  );\n};\nexport default Square;\n","import React from 'react';\n\nconst Triangle: React.FC<React.SVGProps<SVGSVGElement>> = props => {\n  return (\n    <svg viewBox=\"-1 -1 32 32\" {...props}>\n      <polygon points=\"15,0 00,30 30,30\" />\n    </svg>\n  );\n};\n\nexport default Triangle;\n","import React from 'react';\r\nimport { EFigureType } from 'stores/models/Canvas/canvas.types';\r\nimport Circle from '../svg/Circle';\r\nimport Square from '../svg/Square';\r\nimport Triangle from '../svg/Triangle';\r\n\r\nexport const figuresMap = {\r\n  [EFigureType.SQUARE]: Square,\r\n  [EFigureType.TRIANGLE]: Triangle,\r\n  [EFigureType.CIRCLE]: Circle,\r\n};\r\n\r\ninterface IProps extends React.SVGProps<SVGSVGElement> {\r\n  type: EFigureType;\r\n}\r\n\r\nconst SvgFigure: React.FC<IProps> = ({ type, ...svgProps }) => {\r\n  const SvgFigureItem = figuresMap[type];\r\n  return SvgFigureItem ? <SvgFigureItem {...svgProps} /> : null;\r\n};\r\n\r\nexport default SvgFigure;\r\n","import classNames from 'classnames';\r\nimport SvgFigure from 'components/SvgFigure/SvgFigure';\r\nimport { useStore } from 'hooks/useStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { MouseEvent, useMemo } from 'react';\r\nimport { IFigure } from 'stores/models/Canvas/Canvas';\r\nimport { EResizeType } from 'stores/models/Canvas/canvas.types';\r\nimport './Figure.scss';\r\n\r\ninterface IProps {\r\n  figure: IFigure;\r\n}\r\n\r\nconst dotList = [\r\n  {\r\n    type: EResizeType.LEFT_TOP,\r\n    className: '_left-top',\r\n  },\r\n  {\r\n    type: EResizeType.LEFT_BOT,\r\n    className: '_left-bot',\r\n  },\r\n  {\r\n    type: EResizeType.RIGHT_TOP,\r\n    className: '_right-top',\r\n  },\r\n  {\r\n    type: EResizeType.RIGHT_BOT,\r\n    className: '_right-bot',\r\n  },\r\n];\r\n\r\nconst Figure: React.FC<IProps> = ({ figure }) => {\r\n  const context = useStore();\r\n\r\n  const isActive = useMemo(() => {\r\n    return figure.id === context.canvas.selectedFigureId;\r\n  }, [figure.id, context.canvas.selectedFigureId]);\r\n\r\n  const onFigureClick = () => {\r\n    if (!isActive) {\r\n      context.canvas.selectFigure(figure.id);\r\n    }\r\n  };\r\n  const onFigureMouseDown = (e: MouseEvent) => {\r\n    e.stopPropagation();\r\n    const isLeftMouseButton = e.button === 0;\r\n    if (isLeftMouseButton && isActive) {\r\n      context.canvas.setIsDragging(true);\r\n    }\r\n  };\r\n  const onDotMouseDown = (e: MouseEvent, resizeType: EResizeType) => {\r\n    e.stopPropagation();\r\n    const isLeftMouseButton = e.button === 0;\r\n    if (isLeftMouseButton && isActive) {\r\n      context.canvas.setResizingType(resizeType);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      key={figure.id}\r\n      style={{\r\n        width: figure.width,\r\n        height: figure.height,\r\n        transform: `translate3d(\r\n          ${figure.left}px,\r\n          ${figure.top}px,\r\n          0\r\n        )`,\r\n      }}\r\n      className={classNames('figure', {\r\n        _active: isActive,\r\n        _dragging: isActive && context.canvas.isDragging,\r\n      })}\r\n      onClick={onFigureClick}\r\n      onMouseDown={onFigureMouseDown}\r\n    >\r\n      {dotList.map(dot => (\r\n        <div\r\n          key={dot.type}\r\n          onMouseDown={e => onDotMouseDown(e, dot.type)}\r\n          className={`figure__dot ${dot.className}`}\r\n        />\r\n      ))}\r\n\r\n      <SvgFigure\r\n        type={figure.type}\r\n        preserveAspectRatio=\"none\"\r\n        className=\"figure__img\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Figure);\r\n","import { useStore } from 'hooks/useStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { MouseEvent, useRef } from 'react';\r\nimport './Canvas.scss';\r\nimport Figure from './Figure/Figure';\r\n\r\nconst Canvas = () => {\r\n  const context = useStore();\r\n  const canvasRef = useRef(null);\r\n  const onMouseDown = (e: MouseEvent) => {\r\n    if (\r\n      e.currentTarget === canvasRef.current &&\r\n      context.canvas.selectedFigureId\r\n    ) {\r\n      context.canvas.selectFigure(null);\r\n    }\r\n  };\r\n  const onMouseLeave = (e: MouseEvent) => {\r\n    if (e.currentTarget === canvasRef.current && context.canvas.isDragging) {\r\n      context.canvas.setIsDragging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={'canvas'}\r\n      style={{ width: context.canvas.width, height: context.canvas.height }}\r\n      onMouseLeave={onMouseLeave}\r\n      onMouseDown={onMouseDown}\r\n      ref={canvasRef}\r\n    >\r\n      {context.canvas.figures.map(figure => (\r\n        <Figure key={figure.id} figure={figure} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Canvas);\r\n","import classNames from 'classnames';\r\nimport SvgFigure from 'components/SvgFigure/SvgFigure';\r\nimport { useStore } from 'hooks/useStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport './ControlBar.scss';\r\n\r\nconst ControlBar = () => {\r\n  const context = useStore();\r\n\r\n  return (\r\n    <div className=\"control-bar\">\r\n      <div className=\"control-bar__figures-list\">\r\n        {context.canvas.figureTypes.map(figureType => {\r\n          return (\r\n            <SvgFigure\r\n              key={figureType}\r\n              type={figureType}\r\n              onClick={() => context.canvas.addFigure(figureType)}\r\n              className=\"control-bar__figure\"\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"control-bar__nav\">\r\n        <div\r\n          onClick={() => context.history.changeIndexBy(-1)}\r\n          className={classNames({\r\n            'control-bar__nav-link': true,\r\n            _disabled: !context.history.canBack,\r\n          })}\r\n        >\r\n          &larr; prev\r\n        </div>\r\n        <div\r\n          onClick={() => context.history.changeIndexBy(1)}\r\n          className={classNames({\r\n            'control-bar__nav-link': true,\r\n            _disabled: !context.history.canForward,\r\n          })}\r\n        >\r\n          next &rarr;\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(ControlBar);\r\n","import { useStore } from 'hooks/useStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { MouseEvent, useEffect, useRef } from 'react';\r\nimport Canvas from './Canvas/Canvas';\r\nimport ControlBar from './ControlBar/ControlBar';\r\nimport './Editor.scss';\r\n\r\nconst Editor = () => {\r\n  const context = useStore();\r\n  const editorRef = useRef(null);\r\n  const isEditorTarget = (target: EventTarget) => {\r\n    return target === editorRef.current;\r\n  };\r\n\r\n  const onMouseMove = (e: MouseEvent) => {\r\n    if (context.canvas.isDragging) {\r\n      context.canvas.moveSelectedFigure(e.movementX, e.movementY);\r\n    }\r\n    if (context.canvas.isResizing) {\r\n      context.canvas.resizeSelectedFigure(e.movementX, e.movementY);\r\n    }\r\n  };\r\n  const disableActions = (e: MouseEvent) => {\r\n    if (isEditorTarget(e.currentTarget)) {\r\n      if (context.canvas.isDragging) {\r\n        context.canvas.setIsDragging(false);\r\n      }\r\n      if (context.canvas.isResizing) {\r\n        context.canvas.stopResizing();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onKeyDown = (e: KeyboardEvent) => {\r\n      if (context.canvas.selectedFigureId) {\r\n        if (e.key === 'Delete') {\r\n          context.canvas.deleteSelectedFigure();\r\n        }\r\n        if (e.key === 'Escape') {\r\n          context.canvas.selectFigure(null);\r\n        }\r\n      }\r\n    };\r\n    window.document.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      window.document.removeEventListener('keydown', onKeyDown);\r\n    };\r\n  }, [context.canvas]);\r\n\r\n  return (\r\n    <div\r\n      onMouseMove={onMouseMove}\r\n      onMouseUp={disableActions}\r\n      onMouseLeave={disableActions}\r\n      className=\"main-container\"\r\n      ref={editorRef}\r\n    >\r\n      <div className=\"content\">\r\n        <ControlBar />\r\n        <Canvas />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Editor);\r\n","import React from 'react';\nimport Editor from '../../components/Editor/Editor';\n\nconst App = () => {\n  return <Editor />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { connectReduxDevtools } from 'mst-middlewares';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './stores';\n\nif (process.env.NODE_ENV === 'development') {\n  // tslint:disable-next-line:no-var-requires\n  connectReduxDevtools(require('remotedev'), store);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}